USE PersonalTrainer;

-- Select all columns from ExerciseCategory and Exercise.
-- The tables should be joined on ExerciseCategoryId.
-- This query returns all Exercises and their associated ExerciseCategory.
-- 64 rows
SELECT ex.Name, excat.Name
FROM personaltrainer.exercise ex LEFT JOIN personaltrainer.exercisecategory excat
ON ex.ExerciseCategoryId = excat.ExerciseCategoryId;
--------------------
    
-- Select ExerciseCategory.Name and Exercise.Name
-- where the ExerciseCategory does not have a ParentCategoryId (it is null).
-- Again, join the tables on their shared key (ExerciseCategoryId).
-- 9 rows
SELECT excat.Name, ex.Name
FROM personaltrainer.exercise ex LEFT JOIN personaltrainer.exercisecategory excat
ON ex.ExerciseCategoryId = excat.ExerciseCategoryId
WHERE excat.ParentCategoryId IS NULL;
--------------------

-- The query above is a little confusing. At first glance, it's hard to tell
-- which Name belongs to ExerciseCategory and which belongs to Exercise.
-- Rewrite the query using an aliases. 
-- Alias ExerciseCategory.Name as 'CategoryName'.
-- Alias Exercise.Name as 'ExerciseName'.
-- 9 rows
SELECT excat.Name CategoryName, ex.Name ExerciseName
FROM personaltrainer.exercise ex LEFT JOIN personaltrainer.exercisecategory excat
ON ex.ExerciseCategoryId = excat.ExerciseCategoryId
WHERE excat.ParentCategoryId IS NULL;

--------------------

-- Select FirstName, LastName, and BirthDate from Client
-- and EmailAddress from Login 
-- where Client.BirthDate is in the 1990s.
-- Join the tables by their key relationship. 
-- What is the primary-foreign key relationship?
-- 35 rows
SELECT cl.FirstName, cl.LastName, cl.BirthDate, lo.EmailAddress
FROM personaltrainer.client cl JOIN personaltrainer.login lo
ON cl.ClientId = lo.ClientId
WHERE cl.BirthDate LIKE '199%';

--------------------

-- Select Workout.Name, Client.FirstName, and Client.LastName
-- for Clients with LastNames starting with 'C'?
-- How are Clients and Workouts related?
-- 25 rows
SELECT wo.Name WorkoutName, cl.FirstName, cl.LastName
FROM personaltrainer.workout wo LEFT JOIN personaltrainer.clientworkout clwo
ON wo.WorkoutId = clwo.WorkoutId LEFT JOIN personaltrainer.client cl
ON clwo.ClientId = cl.ClientId
WHERE cl.LastName LIKE 'C%';
--------------------

-- Select Names from Workouts and their Goals.
-- This is a many-to-many relationship with a bridge table.
-- Use aliases appropriately to avoid ambiguous columns in the result.
SELECT wor.Name WorkoutName, goa.Name GoalName
FROM personaltrainer.workout wor LEFT JOIN personaltrainer.workoutgoal wg
ON wor.WorkoutId = wg.WorkoutId
LEFT JOIN personaltrainer.goal goa ON wg.GoalId=goa.GoalId;
--------------------

-- Select FirstName and LastName from Client.
-- Select ClientId and EmailAddress from Login.
-- Join the tables, but make Login optional.
-- 500 rows
SELECT cl.FirstName, cl.LastName, lo.ClientId, lo.EmailAddress
FROM personaltrainer.client cl LEFT JOIN personaltrainer.login lo
ON cl.ClientID = lo.ClientID;
--------------------

-- Using the query above as a foundation, select Clients
-- who do _not_ have a Login.
-- 200 rows
SELECT cl.FirstName, cl.LastName, lo.ClientId, lo.EmailAddress
FROM personaltrainer.client cl LEFT JOIN personaltrainer.login lo
ON cl.ClientID = lo.ClientID
WHERE lo.ClientId IS NULL AND lo.EmailAddress IS NULL;
--------------------

-- Does the Client, Romeo Seaward, have a Login?
-- Decide using a single query.
-- nope :(
SELECT cl.FirstName, cl.LastName, lo.ClientId, lo.EmailAddress
FROM personaltrainer.client cl LEFT JOIN personaltrainer.login lo
ON cl.ClientID = lo.ClientID
WHERE cl.FirstName='Romeo' AND cl.LastName='Seaward';
--------------------

-- Select ExerciseCategory.Name and its parent ExerciseCategory's Name.
-- This requires a self-join.
-- 12 rows
SELECT ch.Name ExerciseCategory, pa.Name ParentExerciseCategory
FROM personaltrainer.exercisecategory ch INNER JOIN personaltrainer.exercisecategory pa
ON pa.ExerciseCategoryId=ch.ParentCategoryId;
-- pa.ExerciseCategoryId=ch.ParentCategoryId reverse!!
--------------------
    
-- Rewrite the query above so that every ExerciseCategory.Name is
-- included, even if it doesn't have a parent.
-- 16 rows
SELECT ch.Name ExerciseCategory, pa.Name ParentExerciseCategory
FROM personaltrainer.exercisecategory ch Left JOIN personaltrainer.exercisecategory pa
ON pa.ExerciseCategoryId=ch.ParentCategoryId;
--------------------
    
-- Are there Clients who are not signed up for a Workout?
-- 50 rows
SELECT cl.FirstName, cl.LastName, wo.Name WorkoutName
FROM personaltrainer.client cl LEFT JOIN personaltrainer.clientworkout clwo
ON cl.ClientId = clwo.ClientId LEFT JOIN personaltrainer.workout wo
ON clwo.WorkoutId = wo.WorkoutId
WHERE wo.Name IS NULL;

--------------------

-- Which Beginner-Level Workouts satisfy at least one of Shell Creane's Goals?
-- Goals are associated to Clients through ClientGoal.
-- Goals are associated to Workouts through WorkoutGoal.
-- 6 rows, 4 unique rows
SELECT cl.FirstName, cl.LastName, go.Name Goal, wo.Name Workout
FROM personaltrainer.client cl LEFT JOIN personaltrainer.clientgoal clgo
ON cl.ClientId = clgo.ClientId LEFT JOIN personaltrainer.workoutgoal wogo
ON clgo.GoalId = wogo.GoalId LEFT JOIN personaltrainer.workout wo
ON wogo.WorkoutId = wo.WorkoutId LEFT JOIN personaltrainer.level le
ON wo.LevelId = le.LevelId LEFT JOIN personaltrainer.goal go
ON clgo.GoalId = go.GoalId 
WHERE cl.FirstName='Shell' AND cl.LastName='Creane' AND le.Name='Beginner';

--------------------

-- Select all Workouts. 
-- Join to the Goal, 'Core Strength', but make it optional.
-- You may have to look up the GoalId before writing the main query.
-- If you filter on Goal.Name in a WHERE clause, Workouts will be excluded.
-- Why?
-- 26 Workouts, 3 Goals
SELECT wo.Name Workout, go.Name Goal
FROM personaltrainer.workout wo LEFT OUTER JOIN personaltrainer.workoutgoal wogo
ON wo.WorkoutId = wogo.WorkoutId AND wogo.GoalId=10 LEFT OUTER JOIN personaltrainer.goal go
ON wogo.GoalId = go.GoalId;

--------------------

-- The relationship between Workouts and Exercises is... complicated.
-- Workout links to WorkoutDay (one day in a Workout routine)
-- which links to WorkoutDayExerciseInstance 
-- (Exercises can be repeated in a day so a bridge table is required) 
-- which links to ExerciseInstance 
-- (Exercises can be done with different weights, repetions,
-- laps, etc...) 
-- which finally links to Exercise.
-- Select Workout.Name and Exercise.Name for related Workouts and Exercises.
SELECT wo.Name Workout, ex.Name Exercise
FROM personaltrainer.workout wo LEFT JOIN personaltrainer.workoutday woda
ON wo.WorkoutId = woda.WorkoutId LEFT JOIN personaltrainer.workoutdayexerciseinstance wodaexin
ON woda.WorkoutDayId = wodaexin.WorkoutDayId LEFT JOIN personaltrainer.exerciseinstance exin
ON wodaexin.ExerciseInstanceId = exin.ExerciseInstanceId LEFT JOIN personaltrainer.exercise ex
ON exin.ExerciseId = ex.ExerciseId;

--------------------
   
-- An ExerciseInstance is configured with ExerciseInstanceUnitValue.
-- It contains a Value and UnitId that links to Unit.
-- Example Unit/Value combos include 10 laps, 15 minutes, 200 pounds.
-- Select Exercise.Name, ExerciseInstanceUnitValue.Value, and Unit.Name
-- for the 'Plank' exercise. 
-- How many Planks are configured, which Units apply, and what 
-- are the configured Values?
-- 4 rows, 1 Unit, and 4 distinct Values
SELECT ex.Name Exercise, exinunva.Value, un.Name Unit
FROM personaltrainer.exercise ex LEFT JOIN personaltrainer.exerciseinstance exin
ON ex.ExerciseId = exin.ExerciseId LEFT JOIN personaltrainer.ExerciseInstanceUnitValue exinunva
ON exin.ExerciseInstanceId = exinunva.ExerciseInstanceId LEFT JOIN personaltrainer.unit un
ON exinunva.UnitId = un.UnitId
WHERE ex.Name='Plank';
-- 4 Planks, units: minutes, values: 5, 10, 15, 25
